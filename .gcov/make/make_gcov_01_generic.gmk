# ------------------------------------------------------------------------------
#  Copyright Christopher Kormanyos 2022 - 2024.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
# ------------------------------------------------------------------------------

PATH_MAKE        = $(CURDIR)
PATH_PRJ         = $(PATH_MAKE)/../..
PATH_SRC         = $(PATH_PRJ)/src
PATH_BIN         = $(PATH_MAKE)/bin
PATH_ERR         = $(PATH_MAKE)/err
PATH_OBJ         = $(PATH_MAKE)/obj

CAT              = cat
UNIX2DOS         = unix2dos
LCOV             = lcov
LS               = ls
GCOV             = gcov
GENHTML          = genhtml
GNUECHO          = echo
MKDIR            = mkdir
RM               = rm
SED              = sed
SHA1SUM          = sha1sum
XXD              = $(PATH_BIN)/xxd

include make_gcov_02_files.gmk
include make_gcov_03_flags.gmk

FILES_ALL        = $(FILES_PRJ)
FILES_O          = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .o, $(FILES_ALL))))
FILES_GCOV       = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .gcov, $(FILES_ALL))))

# ------------------------------------------------------------------------------
# VPATH definition: VPATH is required for make to find the source files.
# ------------------------------------------------------------------------------
VPATH    := $(sort $(dir $(FILES_ALL)))


# ------------------------------------------------------------------------------
# Executable file:
# ------------------------------------------------------------------------------

.PHONY: $(PATH_BIN)/xxd
$(PATH_BIN)/xxd: $(FILES_O)
  # Link coverage-instrumented executable
	@$(GNUECHO) +++ link object files to $(PATH_BIN)/xxd
	@$(CC) -x none $(CXXFLAGS) $(FILES_O) -o $(PATH_BIN)/xxd
	@$(GNUECHO)


# ------------------------------------------------------------------------------
# Main dependency:
#   Compile all files and link them.
#   Run gcov and get results.
#   (See also https://github.com/codecov/example-cpp11-cmake)
# ------------------------------------------------------------------------------

.PHONY: gcov
gcov: execute_tests
  # Obtain results
	@$(GNUECHO) +++ running gcov
	@$(GNUECHO)
	@$(GCOV) $(GCOV_FLAGS) $(addsuffix .cpp,$(FILES_PRJ))
	@$(GNUECHO)
	@$(GNUECHO) +++ running lcov
	@$(LCOV) $(LCOV_BRANCH) -c --directory obj --output-file coverage_unfiltered.info
	@$(LCOV) $(LCOV_BRANCH) --remove coverage_unfiltered.info $(LCOV_REMOVES) --output-file coverage.info
	@$(GNUECHO)
	@$(GNUECHO) +++ running genhtml
	@$(GENHTML) coverage.info $(LCOV_BRANCH) --demangle-cpp --output-directory $(PATH_BIN)/report
	@$(GNUECHO)


# ------------------------------------------------------------------------------
# Tests.
# ------------------------------------------------------------------------------

.PHONY: execute_tests
execute_tests : $(PATH_BIN)/xxd
	@-$(GNUECHO) 'test with -help'
	@-$(XXD) -help | grep Usage
	@-$(GNUECHO) 'create zero_a.bin'
	@-$(GNUECHO) "010000: 41" | xxd -r > zero_a.bin
	@-$(GNUECHO) '$(SHA1SUM) zero_a.bin | grep e534caeb1e149b6bc61ea48cf59861c7e15caa63'
	@-$(SHA1SUM) zero_a.bin | grep e534caeb1e149b6bc61ea48cf59861c7e15caa63
	@-$(GNUECHO) 'test with doc/xxd.1'
	@-$(XXD) -l 120 -c 12 ../../doc/xxd.1 | grep 'Tony Nugent'
	@-$(XXD) -l 120 -c 12 ../../doc/xxd.1 > xxd.1.txt
	@-$(GNUECHO) 'unix2dos xxd.1.txt'
	@-$(UNIX2DOS) xxd.1.txt
	@-$(GNUECHO) '$(SHA1SUM) xxd.1.txt | grep b271bc7fc3716a44830bc33ee3a8313c0d3ab7f7'
	@-$(SHA1SUM) xxd.1.txt | grep b271bc7fc3716a44830bc33ee3a8313c0d3ab7f7
	@-$(GNUECHO) 'test2 with doc/xxd.1'
	@-$(XXD) -s 0x36 -l 13 -c 13 ../../doc/xxd.1 | grep '21st May 1996'
	@-$(GNUECHO) 'create a 3-byte abc-file'
	@-$(GNUECHO) "0:61 1:62 2:63" | xxd -r > abc.bin
	@-$(SHA1SUM) abc.bin | grep a9993e364706816aba3e25717850c26c9cd0d89d
	@-$(GNUECHO) -n 'Hello, World!' > testfile.txt
	@-$(XXD) -p testfile.txt | grep 48656c6c6f2c20576f726c64210a
	@-$(GNUECHO) -n -e '\x01\x02\x03\x04\x05' > testbin.bin
	@-$(XXD) -p testbin.bin | grep 00000000: 0102 0304 05




# ------------------------------------------------------------------------------
# Clean temporary files.
# ------------------------------------------------------------------------------

.PHONY: clean
clean:
  # creating output directories
	@$(GNUECHO) +++ cleaning output directories
	@-$(RM) -rf $(PATH_BIN)* || uname -r
	@-$(RM) -rf $(PATH_ERR)* || uname -r
	@-$(RM) -rf $(PATH_OBJ)* || uname -r
	@-$(RM) -f *.gcov || uname -r
	@-$(RM) -f coverage* || uname -r
	@$(GNUECHO)


# ------------------------------------------------------------------------------
# Prepare the gcov build.
# ------------------------------------------------------------------------------

.PHONY: prepare
prepare: clean
	@$(GNUECHO) +++ creating output directories
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(MKDIR) -p $(PATH_ERR)
	@-$(MKDIR) -p $(PATH_OBJ)
	@$(GNUECHO)
	@$(GNUECHO) +++ print gcov version
	@$(GCOV) --version
	@$(GNUECHO)
	@$(GNUECHO) +++ print include paths
	@$(GNUECHO) $(C_INCLUDES)
	@$(GNUECHO)

# ------------------------------------------------------------------------------
# pattern rule for compilation of c-files
# ------------------------------------------------------------------------------
$(PATH_OBJ)/%.o : %.c
	@-$(GNUECHO) +++ compiling: $(notdir $<) to $(notdir $(PATH_OBJ)/$(basename $(@F)).o)
	@-$(CC) $(CFLAGS) -x c -c $(C_INCLUDES) $(C_DEFINES) $< -o $(PATH_OBJ)/$(basename $(@F)).o 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(SED) -e 's|.h:\([0-9]*\),|.h(\1) :|' -e 's|:\([0-9]*\):|(\1) :|' $(PATH_ERR)/$(basename $(@F)).err

# ------------------------------------------------------------------------------
# pattern rule for compilation of cpp-files
# ------------------------------------------------------------------------------
$(PATH_OBJ)/%.o : %.cpp
	@-$(GNUECHO) +++ compiling: $(notdir $<) to $(notdir $(PATH_OBJ)/$(basename $(@F)).o)
	@-$(CC) $(CXXFLAGS) -x c++ -c $(C_INCLUDES) $(C_DEFINES) $< -o $(PATH_OBJ)/$(basename $(@F)).o 2> $(PATH_ERR)/$(basename $(@F)).err
	@-$(SED) -e 's|.h:\([0-9]*\),|.h(\1) :|' -e 's|:\([0-9]*\):|(\1) :|' $(PATH_ERR)/$(basename $(@F)).err
